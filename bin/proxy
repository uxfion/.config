#!/bin/bash

# proxy - A convenient wrapper for proxy management

proxy() {
    # Function to print usage
    print_usage() {
        cat << EOF
Proxy - A convenient wrapper for proxy management

Usage: proxy [operation] [options]

Operations:
    on     Enable proxy (interactive mode if no options provided)
    off    Disable proxy
    show   Show current proxy settings

Required for 'proxy on':
    -p PORT         Set port for all protocols
    or
    -h PORT        Set HTTP/HTTPS port
    -s PORT        Set SOCKS5 port (optional, defaults to HTTP port if not set)

Optional:
    -ip ADDRESS    Specify proxy server address (default: 127.0.0.1)
    --help        Show this help message

Examples:
    proxy on                           # Interactive mode
    proxy on -p 1087                   # Use 1087 for all protocols
    proxy on -h 1087                   # Use 1087 for HTTP/HTTPS, same for SOCKS5
    proxy on -h 1087 -s 1088          # Different ports for HTTP and SOCKS5
    proxy on -ip 192.168.1.100 -p 1087 # Custom IP
    proxy off
    proxy show

Note: 
- If no options provided with 'proxy on', interactive mode will be used
- If no IP is specified, 127.0.0.1 will be used
- When using -h without -s, SOCKS5 will use the same port as HTTP
- The -p option is a shortcut to set the same port for all protocols
EOF
    }

    # Function to validate IP address
    validate_ip() {
        local ip=$1
        if [[ $ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
            return 0
        else
            return 1
        fi
    }

    # Function to validate port number
    validate_port() {
        local port=$1
        if [[ $port =~ ^[0-9]+$ ]] && [ $port -ge 1 ] && [ $port -le 65535 ]; then
            return 0
        else
            return 1
        fi
    }

    # Function to get valid IP address interactively
    get_valid_ip() {
        local input_ip
        while true; do
            read -p "Enter proxy server IP address [127.0.0.1]: " input_ip
            if [ -z "$input_ip" ]; then
                echo "127.0.0.1"
                return 0
            elif validate_ip "$input_ip"; then
                echo "$input_ip"
                return 0
            else
                echo "Invalid IP address. Please try again."
            fi
        done
    }

    # Function to get valid port number interactively
    get_valid_port() {
        local prompt="$1"
        local default="$2"
        local input_port
        while true; do
            if [ -n "$default" ]; then
                read -p "$prompt [$default]: " input_port
                if [ -z "$input_port" ]; then
                    echo "$default"
                    return 0
                fi
            else
                read -p "$prompt: " input_port
            fi
            
            if validate_port "$input_port"; then
                echo "$input_port"
                return 0
            else
                echo "Invalid port number (must be 1-65535). Please try again."
            fi
        done
    }

    # Function to show current proxy settings
    show_proxy() {
        echo "Current proxy settings:"
        if [ -n "$http_proxy" ] || [ -n "$https_proxy" ] || [ -n "$all_proxy" ]; then
            echo "HTTP_PROXY=$http_proxy"
            echo "HTTPS_PROXY=$https_proxy"
            echo "ALL_PROXY=$all_proxy"
        else
            echo "No proxy settings found"
        fi
    }

    # Function to disable proxy
    disable_proxy() {
        eval "$(cat << EOF
unset http_proxy
unset https_proxy
unset all_proxy
unset HTTP_PROXY
unset HTTPS_PROXY
unset ALL_PROXY
EOF
)"
        echo "Proxy settings have been disabled"
    }

    # Function to enable proxy with given settings
    enable_proxy() {
        local ip="$1"
        local http_port="$2"
        local socks_port="$3"

        # Validate IP
        if ! validate_ip "$ip"; then
            echo "Error: Invalid IP address: $ip"
            return 1
        fi

        # Validate ports
        if ! validate_port "$http_port"; then
            echo "Error: Invalid HTTP port: $http_port"
            return 1
        fi
        if ! validate_port "$socks_port"; then
            echo "Error: Invalid SOCKS5 port: $socks_port"
            return 1
        fi

        # Set proxy variables using eval
        eval "$(cat << EOF
export http_proxy="http://$ip:$http_port"
export HTTP_PROXY="http://$ip:$http_port"
export https_proxy="https://$ip:$http_port"
export HTTPS_PROXY="https://$ip:$http_port"
export all_proxy="socks5://$ip:$socks_port"
export ALL_PROXY="socks5://$ip:$socks_port"
EOF
)"
        echo "Proxy settings have been enabled:"
        show_proxy
    }

    # Show help if no arguments or --help
    if [ $# -eq 0 ] || [ "$1" == "--help" ]; then
        print_usage
        return 0
    fi

    # Parse operation (required)
    local operation="$1"
    shift

    case "$operation" in
        show)
            show_proxy
            return 0
            ;;
        off)
            disable_proxy
            return 0
            ;;
        on)
            local ip="127.0.0.1"
            local http_port=""
            local socks_port=""

            # If no additional arguments, use interactive mode
            if [ $# -eq 0 ]; then
                echo "Entering interactive mode..."
                ip=$(get_valid_ip)
                http_port=$(get_valid_port "Enter HTTP/HTTPS proxy port")
                read -p "Use same port for SOCKS5? [Y/n]: " same_port
                if [[ $same_port =~ ^[Nn] ]]; then
                    socks_port=$(get_valid_port "Enter SOCKS5 proxy port")
                else
                    socks_port="$http_port"
                fi
            else
                # Parse options
                while [ $# -gt 0 ]; do
                    case "$1" in
                        -ip)
                            shift
                            if [ $# -eq 0 ]; then
                                echo "Error: -ip requires an address"
                                return 1
                            fi
                            ip="$1"
                            ;;
                        -p)
                            shift
                            if [ $# -eq 0 ]; then
                                echo "Error: -p requires a port number"
                                return 1
                            fi
                            http_port="$1"
                            socks_port="$1"
                            ;;
                        -h)
                            shift
                            if [ $# -eq 0 ]; then
                                echo "Error: -h requires a port number"
                                return 1
                            fi
                            http_port="$1"
                            # If no SOCKS port specified yet, use HTTP port
                            if [ -z "$socks_port" ]; then
                                socks_port="$1"
                            fi
                            ;;
                        -s)
                            shift
                            if [ $# -eq 0 ]; then
                                echo "Error: -s requires a port number"
                                return 1
                            fi
                            socks_port="$1"
                            ;;
                        *)
                            echo "Error: Unknown option: $1"
                            print_usage
                            return 1
                            ;;
                    esac
                    shift
                done

                # Verify required settings
                if [ -z "$http_port" ]; then
                    echo "Error: HTTP port must be specified using either -p or -h"
                    print_usage
                    return 1
                fi

                # If SOCKS port wasn't set explicitly, use HTTP port
                if [ -z "$socks_port" ]; then
                    socks_port="$http_port"
                fi
            fi

            enable_proxy "$ip" "$http_port" "$socks_port"
            ;;
        *)
            echo "Error: Invalid operation: $operation"
            print_usage
            return 1
            ;;
    esac
}

# Make the function available
eval "$(declare -f proxy)"

# If being run directly, execute the function with arguments
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    proxy "$@"
fi