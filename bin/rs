#!/bin/bash

# rs - A convenient wrapper for rsync
# Can be both executed directly and sourced
# Usage: rs [operation] [options] source destination

rs() {
    # Function to print usage
    print_usage() {
        cat << EOF
RS - A convenient wrapper for rsync

Usage: rs [operation] [options] source destination

Operations:
    copy    Synchronize files (rsync -avzP)
    move    Synchronize and remove source files (rsync --remove-source-files)

Options:
    -h      Show this help message
    -np     Ignore permissions, owner and group
    -pw     Use password file (followed by password file path)

Examples:
    rs copy /source/path/ /dest/path/
    rs move -np /source/path/ /dest/path/
    rs copy -pw ./rsync.passwd local.file server::module/path/
    rs copy local.file remote:/path/
    rs move *.txt remote:/backup/        # Support wildcards
    rs copy -pw rsync.passwd file* server::module/path/
EOF
    }

    # Show help if no arguments or -h
    if [ $# -eq 0 ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
        print_usage
        return 0
    fi

    # Initialize variables
    local operation=""
    local rsync_opts="-avzP"
    local sources=()
    local destination=""
    local args=("$@")
    local i=0
    local parsing_sources=false

    # Parse operation (first argument)
    if [ "${args[0]}" == "copy" ] || [ "${args[0]}" == "move" ]; then
        operation="${args[0]}"
        ((i++))
    else
        echo "Error: First argument must be 'copy' or 'move'"
        print_usage
        return 1
    fi

    # First pass: parse options
    while [ $i -lt ${#args[@]} ]; do
        case "${args[i]}" in
            -np)
                rsync_opts="$rsync_opts --no-perms --no-owner --no-group"
                ((i++))
                ;;
            -pw)
                ((i++))
                if [ $i -lt ${#args[@]} ]; then
                    rsync_opts="$rsync_opts --password-file=${args[i]}"
                    ((i++))
                else
                    echo "Error: -pw option requires a password file path"
                    print_usage
                    return 1
                fi
                ;;
            *)
                # Start collecting sources
                break
                ;;
        esac
    done

    # Second pass: collect all remaining arguments except the last as sources
    local last_idx=$((${#args[@]} - 1))
    while [ $i -lt $last_idx ]; do
        sources+=("${args[i]}")
        ((i++))
    done

    # The last argument is the destination
    if [ $i -eq $last_idx ]; then
        destination="${args[i]}"
    fi

    # Verify we have sources and destination
    if [ ${#sources[@]} -eq 0 ] || [ -z "$destination" ]; then
        echo "Error: Both source(s) and destination must be specified"
        print_usage
        return 1
    fi

    # Add remove-source-files option for move operation
    if [ "$operation" == "move" ]; then
        rsync_opts="$rsync_opts --remove-source-files"
    fi

    # Build and execute command
    # Start with the basic command
    local cmd="rsync $rsync_opts"
    
    # Add each source to the command
    for src in "${sources[@]}"; do
        cmd="$cmd '$src'"
    done
    
    # Add the destination
    cmd="$cmd '$destination'"

    # Print the command that will be executed (uncomment for debugging)
    # echo "Executing: $cmd"

    # Execute command
    eval "$cmd"
    local status=$?

    # Check rsync exit status
    if [ $status -eq 0 ]; then
        echo "Operation completed successfully"
        return 0
    else
        echo "Operation failed with exit code $status"
        return $status
    fi
}

# If the script is being executed directly (not sourced),
# run the function with all arguments
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    rs "$@"
fi