#!/bin/bash

# rc - A convenient wrapper for rclone
# Can be both executed directly and sourced

rc() {
    # Function to print usage
    print_usage() {
        cat << EOF
RC - A convenient wrapper for rclone

Usage: rc [operation] [options] source [destination]

Operations:
    copy    Copy files (rclone copy)
    move    Move files (rclone move)
    sync    Sync directories (rclone sync)
    ls      List contents of a remote (rclone lsf)

Options:
    -h      Show this help message
    -t N    Set number of transfers (--transfers N)

Directory Behavior (like rsync):
    rc copy src/ dest/     # Copies contents of src to dest/
    rc copy src dest/      # Copies src directory to dest/src/

Examples:
    rc copy -t 8 *.txt gdrive:backup/      # Copy all txt files with 8 transfers
    rc move data-* od:archive/             # Move multiple files
    rc copy dir/ remote:backup/            # Copy directory contents
    rc sync docs/ gdrive:docs/             # Sync contents
    rc copy remote1:docs/ remote2:backup/  # Copy between remotes
    rc ls gdrive:backup                    # List files in remote directory

Note: 
- Progress is enabled by default (-P/--progress)
- Empty source directories are preserved (--create-empty-src-dirs)
- Directory behavior matches rsync (trailing slash matters)
- Remotes should be configured using 'rclone config' first
- For remote-to-remote transfers, consider using -t with higher value
EOF
    }

    # Function to check if a path is remote
    is_remote_path() {
        [[ "$1" == *:* ]]
    }

    # Function to extract directory name from a path
    get_dirname() {
        local path="$1"
        
        # Handle remote paths (contains colon)
        if is_remote_path "$path"; then
            # Extract the part after the colon
            local remote_part="${path#*:}"
            # If remote_part is empty or just /, return the remote name
            if [[ -z "$remote_part" || "$remote_part" == "/" ]]; then
                echo "${path%:*}"
            else
                # Split on last /
                echo "${remote_part##*/}"
            fi
        else
            # Local path
            basename "${path%/}"
        fi
    }

    # Function to check if a remote path is a directory using lsjson
    check_remote_path_type() {
        local path="$1"
        local parent_dir
        local basename
        
        # If path already has trailing slash, it's definitely a directory
        if [[ "$path" == */ ]]; then
            echo "dir"
            return 0
        fi
        
        # Remote root is always a directory
        if [[ "$path" =~ ^[^:]+:$ ]]; then
            echo "dir"
            return 0
        fi
        
        # For paths without trailing slash, we need to check with lsjson
        # Extract parent directory and basename
        if [[ "$path" == */* ]]; then
            # Has path components
            parent_dir="${path%/*}"
            basename="${path##*/}"
        else
            # Just remote:name
            parent_dir="${path%%:*}:"
            basename="${path#*:}"
        fi
        
        # Use lsjson to check if the path exists and if it's a directory
        local json_output
        json_output=$(rclone lsjson "$parent_dir" 2>/dev/null) || {
            echo "error"
            return 1
        }
        
        # Parse the JSON output to find our path
        # Using grep and cut for basic JSON parsing to avoid dependencies
        local is_dir
        is_dir=$(echo "$json_output" | grep -F "\"Name\":\"$basename\"" | grep -o '"IsDir":[^,}]*' | cut -d':' -f2)
        
        if [[ "$is_dir" == "true" ]]; then
            echo "dir"
        elif [[ "$is_dir" == "false" ]]; then
            echo "file"
        else
            # Path not found
            echo "notfound"
        fi
        
        return 0
    }

    # Function to format command for display, adding quotes around arguments with spaces/special chars
    format_cmd_for_display() {
        local cmd_str="$1"
        shift
        
        for arg in "$@"; do
            # If argument contains spaces, pipes, or other special chars, add quotes
            if [[ "$arg" =~ [[:space:]\'\"\\|\;\&\<\>\(\)\$\`] ]]; then
                cmd_str="$cmd_str \"$arg\""
            else
                cmd_str="$cmd_str $arg"
            fi
        done
        
        echo "$cmd_str"
    }

    # Function to check command status and handle errors
    check_command_status() {
        local status=$1
        if [ $status -ne 0 ]; then
            echo "Error: rclone command failed with status $status"
            return 1
        fi
        return 0
    }

    # Unified function to safely execute rclone commands
    safe_execute_command() {
        local operation="$1"
        shift
        
        # Build command array
        local cmd=(rclone "$operation")
        local display_args=("$operation")
        
        # Process all arguments
        local arg_count=0
        local src=""
        local dest=""
        
        for arg in "$@"; do
            if [[ $arg_count -eq 0 ]]; then
                # First argument is source
                src="$arg"
                ((arg_count++))
            elif [[ $arg_count -eq 1 && "$dest" == "" ]]; then
                # Second argument is destination (if provided)
                dest="$arg"
                ((arg_count++))
            else
                # Other arguments are options
                cmd+=("$arg")
                display_args+=("$arg")
            fi
        done
        
        # Add source and destination to the command
        cmd+=("$src")
        display_args+=("$src")
        
        if [[ -n "$dest" ]]; then
            cmd+=("$dest")
            display_args+=("$dest")
        fi
        
        # Format command for display with proper quoting
        local display_cmd=$(format_cmd_for_display "rclone" "${display_args[@]}")
        echo "Executing: $display_cmd"
        
        # Execute the actual command
        "${cmd[@]}"
        
        # Check and handle command status
        local status=$?
        check_command_status $status || return $status
        
        return 0
    }

    # Show help if no arguments or -h
    if [ $# -eq 0 ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
        print_usage
        return 0
    fi

    # Initialize variables
    local operation=""
    local rclone_opts=(-P)  # Default options as array - just -P for progress
    local sources=()
    local destination=""
    local args=("$@")
    local i=0
    local need_dest=true

    # Parse operation (first argument)
    case "${args[0]}" in
        copy|move|sync)
            operation="${args[0]}"
            # Add --create-empty-src-dirs for these operations
            rclone_opts+=("--create-empty-src-dirs")
            ;;
        ls)
            operation="lsf"
            rclone_opts=(--separator "  |  " --format "tsp")
            need_dest=false
            ;;
        *)
            echo "Error: Invalid operation '${args[0]}'"
            print_usage
            return 1
            ;;
    esac
    ((i++))

    # Parse options first
    while [ $i -lt ${#args[@]} ]; do
        case "${args[i]}" in
            -t)
                ((i++))
                if [ $i -lt ${#args[@]} ] && [[ "${args[i]}" =~ ^[0-9]+$ ]]; then
                    rclone_opts+=(--transfers "${args[i]}")
                    ((i++))
                else
                    echo "Error: -t requires a number"
                    print_usage
                    return 1
                fi
                ;;
            *)
                break
                ;;
        esac
    done

    # Collect sources and destination
    local last_idx=$((${#args[@]} - 1))
    if [ "$need_dest" = true ]; then
        while [ $i -lt $last_idx ]; do
            sources+=("${args[i]}")
            ((i++))
        done

        # Get destination from the last argument
        if [ $i -eq $last_idx ]; then
            destination="${args[i]}"
        fi
    else
        # For operations that don't need destination (like ls), just get the source
        if [ $i -le $last_idx ]; then
            sources=("${args[i]}")
        fi
    fi

    # Verify we have sources
    if [ ${#sources[@]} -eq 0 ]; then
        echo "Error: Source must be specified"
        print_usage
        return 1
    fi
    
    # Verify we have destination if needed
    if [ "$need_dest" = true ] && [ -z "$destination" ]; then
        echo "Error: Destination must be specified for $operation operation"
        print_usage
        return 1
    fi

    # Special handling for 'ls' operation
    if [ "$operation" = "lsf" ]; then
        local src="${sources[0]}"
        # Check if source is a remote path
        if ! is_remote_path "$src"; then
            echo "Error: 'ls' operation requires a remote path (e.g., remote:path)"
            print_usage
            return 1
        fi
        
        # Execute the ls command
        safe_execute_command "$operation" "$src" "${rclone_opts[@]}" || return $?
        return 0
    fi

    # Check if this is a remote-to-remote transfer
    if is_remote_path "${sources[0]}" && is_remote_path "$destination"; then
        # For remote-to-remote transfers, suggest higher transfer count if not set
        if ! [[ " ${rclone_opts[*]} " =~ " --transfers " ]]; then
            echo "Note: For remote-to-remote transfers, consider using -t option to set higher transfer count"
        fi
    fi

    # Handle directory behavior for copy/move/sync operations
    for ((j=0; j<${#sources[@]}; j++)); do
        local src="${sources[j]}"
        
        # Determine if this is a directory path without trailing slash
        local is_dir=false
        local has_trailing_slash=false
        
        # Check if path has a trailing slash
        if [[ "$src" == */ ]]; then
            has_trailing_slash=true
            is_dir=true
        fi
        
        # Note: If source is a wildcard pattern, is_dir and has_trailing_slash
        # might not be accurate, but we'll handle it in the file existence check
        
        # For local paths, check if it's a directory
        if ! is_remote_path "$src" && [[ ! "$src" == *[*?]* ]]; then  # Skip check for paths with wildcards
            if [ -d "${src%/}" ]; then
                is_dir=true
            elif [ -e "${src%/}" ]; then
                # It exists but is not a directory (might be a file)
                is_dir=false
            else
                # Path doesn't exist
                echo "Warning: Source path doesn't exist: $src"
                continue
            fi
        elif is_remote_path "$src" && [[ ! "$src" == *[*?]* ]]; then
            # For remote paths, use lsjson to check if it's a directory
            local path_type
            path_type=$(check_remote_path_type "$src")
            
            case "$path_type" in
                "dir")
                    is_dir=true
                    ;;
                "file")
                    is_dir=false
                    ;;
                "notfound")
                    echo "Warning: Remote path not found: $src"
                    continue
                    ;;
                "error")
                    echo "Warning: Error checking remote path: $src"
                    # Default to directory behavior for safety
                    is_dir=true
                    ;;
            esac
        else
            # This is a path with wildcards
            # We'll let rclone handle this directly
            safe_execute_command "$operation" "$src" "$destination" "${rclone_opts[@]}" || return $?
            # Skip further processing for this wildcard source
            continue
        fi
        
        if [ "$is_dir" = true ] && [ "$has_trailing_slash" = false ]; then
            # No trailing slash on directory, copy the directory itself
            # Get directory name
            local dirname=$(get_dirname "$src")
            # Update the destination for this source
            local new_dest="${destination%/}/$dirname"
            
            # Execute command safely
            safe_execute_command "$operation" "${src%/}" "$new_dest" "${rclone_opts[@]}" || return $?
        else
            # For files or directories with trailing slash, copy directly to destination
            safe_execute_command "$operation" "$src" "$destination" "${rclone_opts[@]}" || return $?
        fi
    done

    echo "Operation completed successfully"
    return 0
}

# If the script is being executed directly (not sourced),
# run the function with all arguments
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    rc "$@"
fi