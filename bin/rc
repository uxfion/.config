#!/bin/bash

# rc - A convenient wrapper for rclone
# Can be both executed directly and sourced

rc() {
    # Function to print usage
    print_usage() {
        cat << EOF
RC - A convenient wrapper for rclone

Usage: rc [operation] [options] source destination

Operations:
    copy    Copy files (rclone copy)
    move    Move files (rclone move)
    sync    Sync directories (rclone sync)
    ls      List contents (rclone ls)
    lsd     List directories (rclone lsd)
    size    Show total size (rclone size)
    check   Check files (rclone check)

Options:
    -h      Show this help message
    -t N    Set number of transfers (--transfers N)
    -np     Dry run, no changes made (--dry-run)
    -v      Verbose output (--verbose)
    -q      Quiet output (--quiet) and disable progress
    -f      Filter file (followed by filter file path)
    -c      Copy contents only (don't create parent directory)

Directory Behavior (like rsync):
    rc copy src/ dest/     # Copies contents of src to dest/
    rc copy src dest/      # Copies src directory to dest/src/

Examples:
    rc ls gdrive:                          # List files in Google Drive
    rc copy -t 8 *.txt gdrive:backup/      # Copy all txt files
    rc move -t 16 data-* od:archive/       # Move multiple files
    rc copy dir/ remote:backup/            # Copy directory contents
    rc sync -np docs/ gdrive:docs/         # Dry-run sync contents
    rc copy -c local* remote:data/         # Copy matching directories' contents

Note: 
- Progress (-P) is enabled by default unless -q is used
- Directory behavior matches rsync (trailing slash matters)
- Remotes should be configured using 'rclone config' first
EOF
    }

    # Show help if no arguments or -h
    if [ $# -eq 0 ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
        print_usage
        return 0
    fi

    # Initialize variables
    local operation=""
    local rclone_opts="--progress --stats 1s"  # Default options
    local sources=()
    local destination=""
    local args=("$@")
    local i=0
    local need_dest=true
    local contents_only=false

    # Parse operation (first argument)
    case "${args[0]}" in
        copy|move|sync|check)
            operation="${args[0]}"
            ;;
        ls|lsd|size)
            operation="${args[0]}"
            need_dest=false
            rclone_opts=""  # No progress needed for these operations
            ;;
        *)
            echo "Error: Invalid operation '${args[0]}'"
            print_usage
            return 1
            ;;
    esac
    ((i++))

    # Parse options first
    while [ $i -lt ${#args[@]} ]; do
        case "${args[i]}" in
            -t)
                ((i++))
                if [ $i -lt ${#args[@]} ] && [[ "${args[i]}" =~ ^[0-9]+$ ]]; then
                    rclone_opts="$rclone_opts --transfers ${args[i]}"
                    ((i++))
                else
                    echo "Error: -t requires a number"
                    print_usage
                    return 1
                fi
                ;;
            -c)
                contents_only=true
                ((i++))
                ;;
            -np)
                rclone_opts="$rclone_opts --dry-run"
                ((i++))
                ;;
            -v)
                rclone_opts="$rclone_opts --verbose"
                ((i++))
                ;;
            -q)
                rclone_opts=""  # Remove progress for quiet mode
                rclone_opts="$rclone_opts --quiet"
                ((i++))
                ;;
            -f)
                ((i++))
                if [ $i -lt ${#args[@]} ]; then
                    rclone_opts="$rclone_opts --filter-from ${args[i]}"
                    ((i++))
                else
                    echo "Error: -f option requires a filter file path"
                    print_usage
                    return 1
                fi
                ;;
            *)
                break
                ;;
        esac
    done

    # Collect sources and destination
    local last_idx=$((${#args[@]} - 1))
    while [ $i -lt $last_idx ]; do
        sources+=("${args[i]}")
        ((i++))
    done

    # Get destination from the last argument
    if [ $i -eq $last_idx ]; then
        destination="${args[i]}"
    fi

    # Verify we have sources and destination
    if [ ${#sources[@]} -eq 0 ]; then
        echo "Error: Source must be specified"
        print_usage
        return 1
    fi
    
    if [ "$need_dest" = true ] && [ -z "$destination" ]; then
        echo "Error: Destination must be specified for $operation operation"
        print_usage
        return 1
    fi

    # Handle directory behavior for copy/move/sync operations
    if [[ "$operation" =~ ^(copy|move|sync)$ ]] && [ "$contents_only" = false ]; then
        for ((j=0; j<${#sources[@]}; j++)); do
            local src="${sources[j]}"
            # Only process directories
            if [ -d "${src%/}" ]; then
                if [[ "$src" != */ ]]; then  # No trailing slash, copy the directory itself
                    src="${src%/}"
                    # Get the base name of the source directory
                    local dirname=$(basename "$src")
                    # Update the destination for this source
                    local new_dest="${destination%/}/$dirname"
                    # Build the command for this source
                    local cmd="rclone $operation $rclone_opts '$src' '$new_dest'"
                    eval "$cmd"
                    local status=$?
                    if [ $status -ne 0 ]; then
                        return $status
                    fi
                    continue
                fi
            fi
            # For files or directories with trailing slash, copy directly
            local cmd="rclone $operation $rclone_opts '$src' '$destination'"
            eval "$cmd"
            local status=$?
            if [ $status -ne 0 ]; then
                return $status
            fi
        done
    else
        # For operations without directory handling or when -c is used
        for src in "${sources[@]}"; do
            local cmd="rclone $operation $rclone_opts '$src' '$destination'"
            eval "$cmd"
            local status=$?
            if [ $status -ne 0 ]; then
                return $status
            fi
        done
    fi

    echo "Operation completed successfully"
    return 0
}

# If the script is being executed directly (not sourced),
# run the function with all arguments
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    rc "$@"
fi